plugins {
    id 'com.github.johnrengelman.shadow'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    implementation project(path: ':common_config')

    implementation 'com.electronwill.night-config:toml:3.6.4'
    include group: 'com.electronwill.night-config', name: 'toml', version: '3.6.4'
    include group: 'com.electronwill.night-config', name: 'core', version: '3.6.4'
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    dependsOn(':app:shadowJar')

    from(project(':app').tasks.shadowJar) {
        into 'META-INF/jarjar'
    }
    from(project(':common_config').sourceSets.main.output)

    input.set shadowJar.archiveFile
}

unifiedPublishing {
    project {
        gameVersions = ["1.19.2", "1.19.3", "1.19.4", "1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4", "1.20.6", "1.21", "1.21.1", "1.21.2", "1.21.3", "1.21.4"]
        gameLoaders = ["fabric"]

        displayName = tasks.remapJar.archiveFile.get().asFile.name
        version = mod_version
        changelog = file('../changelog.md').text
        releaseType = "beta"

        mainPublication tasks.remapJar

        var cfToken = System.getenv("CF_TOKEN")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = "1154099"
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = "ix1qq8Ux"
            }
        }
    }
}